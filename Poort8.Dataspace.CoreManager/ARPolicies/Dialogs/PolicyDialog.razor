@using Poort8.Dataspace.AuthorizationRegistry.Entities;
@using Poort8.Dataspace.CoreManager.Services;
@using OROrganization = Poort8.Dataspace.OrganizationRegistry.Organization;
@implements IDialogContentComponent<Policy>

<FluentSelect Label="Use Case" @bind-Value="Content.UseCase" @bind-SelectedOption="@selectedUseCase" Items="@UseCaseService.UseCases" OptionValue="@(u => u?.Name)" OptionText="@(u => u?.Name)" />
@if (StateContainer.CurrentOROrganizations is not null && StateContainer.CurrentOROrganizations.Any(o => o.Identifier.Equals(Content.IssuerId)))
{
    <FluentSelect Label="Issuer" @bind-Value="Content.IssuerId" @bind-SelectedOption="@selectedIssuerOROrganization" Items="@StateContainer.CurrentOROrganizations" OptionValue="@(o => o?.Identifier)" OptionText="@(o => $"{o?.Name} ({o?.Identifier})")" />
}
else
{
    <FluentTextField Label="Issuer" @bind-Value="Content.IssuerId" Disabled=true />
}
@if (StateContainer.CurrentOROrganizations is not null && StateContainer.CurrentOROrganizations.Any(o => o.Identifier.Equals(Content.SubjectId)))
{
    <FluentSelect Label="Actor" @bind-Value="Content.SubjectId" @bind-SelectedOption="@selectedActorOROrganization" Items="@StateContainer.CurrentOROrganizations" OptionValue="@(o => o?.Identifier)" OptionText="@(o => $"{o?.Name} ({o?.Identifier})")" />
}
else
{
    <FluentTextField Label="Actor" @bind-Value="Content.SubjectId" Disabled=true />
}
@if (StateContainer.CurrentOROrganizations is not null && StateContainer.CurrentOROrganizations.Any(o => o.Identifier.Equals(Content.ServiceProvider)))
{
    <FluentSelect Label="Service Provider" @bind-Value="Content.ServiceProvider" @bind-SelectedOption="@selectedServiceProviderOROrganization" Items="@StateContainer.CurrentOROrganizations" OptionValue="@(o => o?.Identifier)" OptionText="@(o => $"{o?.Name} ({o?.Identifier})")" />
}
else
{
    <FluentTextField Label="Service Provider" @bind-Value="Content.ServiceProvider" Disabled=true />
}
<FluentDatePicker Label="Not Before" Culture=@(new System.Globalization.CultureInfo("nl-NL")) Value="@DateTimeOffset.FromUnixTimeSeconds(Content.NotBefore).LocalDateTime.Date" ValueChanged=NotBeforeChanged />
<FluentDatePicker Label="Not On Or After" Culture=@(new System.Globalization.CultureInfo("nl-NL")) Value="@DateTimeOffset.FromUnixTimeSeconds(Content.Expiration).LocalDateTime.Date" ValueChanged=ExpirationChanged />
@if (selectedUseCase is not null && selectedUseCase.Actions.Any())
{
    <FluentSelect Label="Action" @bind-Value="Content.Action" Items="@selectedUseCase.Actions.Distinct()" SelectedOption="@selectedUseCase.Actions.First()" />
}
else
{
    <FluentTextField Label="Action" @bind-Value="Content.Action" />
}
@if (selectedUseCase is not null && selectedUseCase.ResourceTypes.Any())
{
    <FluentSelect Label="Resource Type" @bind-Value="Content.Type" Items="@selectedUseCase.ResourceTypes.Distinct()" SelectedOption="@selectedUseCase.ResourceTypes.First()" />
}
else
{
    <FluentTextField Label="Resource Type" @bind-Value="Content.Type" />
}
@if (selectedUseCase is not null && selectedUseCase.ResourceIdentifiers.Any())
{
    <FluentSelect Label="Resource Identifier" @bind-Value="Content.ResourceId" Items="@selectedUseCase.ResourceIdentifiers.Distinct()" SelectedOption="@selectedUseCase.ResourceIdentifiers.First()" />
}
else
{
    <FluentTextField Label="Resource Identifier" @bind-Value="Content.ResourceId" />
}
@if (selectedUseCase is not null && selectedUseCase.ResourceAttributes.Any())
{
    <FluentSelect Label="Resource Attribute" @bind-Value="Content.Attribute" Items="@selectedUseCase.ResourceAttributes.Distinct()" SelectedOption="@selectedUseCase.ResourceAttributes.First()" />
}
else
{
    <FluentTextField Label="Resource Attribute" @bind-Value="Content.Attribute" />
}

@code {
    [Parameter]
    public required Policy Content { get; set; }
    [Inject]
    public required StateContainer StateContainer { get; set; }
    [Inject]
    public required UseCaseService UseCaseService { get; set; }

    private UseCase? selectedUseCase;
    private OROrganization? selectedIssuerOROrganization;
    private OROrganization? selectedActorOROrganization;
    private OROrganization? selectedServiceProviderOROrganization;

    private void NotBeforeChanged(DateTime? newDate)
    {
        if (newDate is not null) Content.NotBefore = ((DateTimeOffset)newDate).ToUnixTimeSeconds();
    }

    private void ExpirationChanged(DateTime? newDate)
    {
        if (newDate is not null) Content.Expiration = ((DateTimeOffset)newDate).ToUnixTimeSeconds();
    }
}